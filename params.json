{
  "name": "Fadecandy-android",
  "tagline": "Fadecandy server library to manage your Fadecandy USB controlled LED driver on Android",
  "body": "# Fadecandy Android\r\n\r\n[![CircleCI](https://img.shields.io/circleci/project/akinaru/fadecandy-android.svg?maxAge=2592000?style=plastic)](https://circleci.com/gh/akinaru/fadecandy-android) [ ![Download](https://api.bintray.com/packages/akinaru/maven/fadecandy-server-android/images/download.svg) ](https://bintray.com/akinaru/maven/fadecandy-server-android/_latestVersion) [![License](http://img.shields.io/:license-mit-blue.svg)](LICENSE.md)\r\n\r\nThe [Fadecandy](https://github.com/scanlime/fadecandy) server library for Android devices\r\n\r\nControl your Fadecandy USB LED controller plugged into your Android device\r\n\r\nTry Fadecandy server / client with the [sample app](https://play.google.com/store/apps/details?id=fr.bmartel.fadecandy) available on the Playstore.\r\n\r\n**No root required**\r\n\r\n[![Download Fadecandy from Google Play](http://www.android.com/images/brand/android_app_on_play_large.png)](https://play.google.com/store/apps/details?id=fr.bmartel.fadecandy) [![Download latest debug from drone.io](https://raw.githubusercontent.com/kageiit/images-host/master/badges/drone-io-badge.png)](https://drone.io/github.com/akinaru/fadecandy-android/files/fadecandy-app/build/outputs/apk/fadecandy-app-debug.apk)\r\n\r\n![fadecandy](https://github.com/akinaru/fadecandy-android/raw/master/img/fadecandy.gif)\r\n\r\nYou can control your Fadecandy device from :\r\n* Android smartphone\r\n* Android tablet\r\n* Android TV (the sample app is not available on Android TV Playstore but you can upload the apk anyway)\r\n\r\n## What is Fadecandy ?\r\n\r\nFadecandy is a USB controlled LED driver with on-board dithering. One Fadecandy device support up to 8 strips of 64 Leds that gives you a maximum of 512 Leds/Fadecandy device.\r\n\r\n![notif](https://github.com/akinaru/fadecandy-android/raw/master/img/fadecandy.jpg)\r\n\r\nCheck [official Fadecandy repository](https://github.com/scanlime/fadecandy) for more information about Fadecandy device\r\n\r\n## What is Fadecandy Server ?\r\n\r\nFadecandy server is a TCP server embedded in Fadecandy project which is used to remotely control Fadecandy USB devices through [Open Pixel Control protocol](http://openpixelcontrol.org/), a custom TCP protocol tailored to control LEDs\r\n\r\nCheck [official Fadecandy repository](https://github.com/scanlime/fadecandy#open-pixel-control-server) for more information about Open Pixel Control Server\r\n\r\n## How does it work ? \r\n\r\nFadecandy Android fork is available at https://github.com/akinaru/fadecandy\r\n\r\nOriginally, Fadecandy server uses libusbx to interface with Fadecandy USB devices. In Android, a regular user has to grant permission for the application to open an USB device.\r\n\r\nUsing [Fadecandy Android app](https://play.google.com/store/apps/details?id=fr.bmartel.fadecandy), when you plug a Fadecandy in your Android device, you will see this pop-up :\r\n\r\n![notif](https://github.com/akinaru/fadecandy-android/raw/master/screen/permission_pop.png)\r\n\r\nIf user click on `Use by default for this USB device`, it wont be asked again for this USB device when the device is re-plugged again.\r\n\r\nWhat differs between libusbx Fadecandy server & Android Fadecandy server is that All USB operations including USB attached/detached events are catch using Java API :\r\n\r\n* start server flow :\r\n\r\n| order | description  | language |\r\n|---|--------------------------------------------------------------------------|-------|\r\n| 1 | register a USB event receiver (for a specific product/vendor ID)         | Java  |                                                 \r\n| 2 | start Fadecandy server                                                   | C++   | \r\n\r\n* USB attached flow :\r\n\r\n| order | description  | language |\r\n|---|--------------------------------------------------------------------------|-------|\r\n| 1 | catch a USB device attached event                                        | Java  |          \r\n| 2 | check if this Fadecandy USB is allowed                                   | Java  |               \r\n| 3 | ask permission if device is not allowed                                  | Java  |                \r\n| 4 | open the device if permission is granted                                 | Java  |                 \r\n| 5 | notify Fadecandy server that a new device is attached                    | C++   |                             \r\n\r\n* USB detached flow :\r\n\r\n| order | description | language |\r\n|---|-------------------|--------|\r\n| 1 | catch a USB device detached event | Java |\r\n| 2 | notify Fadecandy server that a device is detached | C++ |\r\n\r\n\r\n* USB write flow :\r\n\r\n| order | description | language |\r\n|-------|-------------|----------|\r\n| 1     | prepare data to be written | C++ |\r\n| 2     | perform a bulk transfer on `UsbDeviceConnection` | Java |\r\n\r\nFor writing to USB device, Fadecandy server is calling from C++ a Java method to perform a bulk transfer\r\n\r\n## How to include it in your Android project ?\r\n\r\n* with Gradle, from jcenter :\r\n\r\n```\r\ncompile 'com.github.akinaru:fadecandy-service:1.4'\r\n```\r\n\r\n## How to use it ?\r\n\r\n* Use `FadecandyClient` service wrapper : \r\n\r\n\r\n```\r\nmFadecandyClient = new FadecandyClient(mContext, \r\n\r\n\t\tnew IFcServerEventListener() {\r\n\r\n            @Override\r\n            public void onServerStart() {\r\n\r\n                // server is started \r\n\r\n            }\r\n\r\n            @Override\r\n            public void onServerClose() {\r\n\r\n                // server is closed\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onServerError(ServerError error) {\r\n\r\n            \t// a server error occured\r\n\r\n            }\r\n\r\n        }, new IUsbEventListener() {\r\n\r\n            @Override\r\n            public void onUsbDeviceAttached(UsbItem usbItem) {\r\n                \r\n                // a Fadecandy device has been attached\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onUsbDeviceDetached(UsbItem usbItem) {\r\n                \r\n                // a Fadecandy device has been detached\r\n\r\n            }\r\n        }, \r\n        \"com.your.package/.activity.MainActivity\"\r\n);\r\n```\r\n\r\n`FadecandyClient` will give you an easy-to-use interface between Fadecandy Service and your application\r\n\r\n\r\n### Start Fadecandy server \r\n\r\n```\r\nmFadecandyClient.startServer();\r\n```\r\n\r\n`startServer()` will internally stop the server if already running before starting\r\n\r\n### Stop Fadecandy server\r\n\r\n```\r\nmFadecandyClient.closeServer();\r\n```\r\n\r\n### Check if server is running \r\n\r\n```\r\nboolean isRunning = mFadecandyClient.isServerRunning();\r\n```\r\n\r\n### Get last server IP/host & last server port\r\n\r\n```\r\nString serverAdress = mFadecandyClient.getIpAddress();\r\n\r\nint serverPort = mFadecandyClient.getServerPort();\r\n```\r\n\r\n### Set server IP/host & server port \r\n\r\n```\r\nmFadecandyClient.setServerAddress(\"127.0.0.1\");\r\n\r\nmFadecandyClient.setServerPort(7890);\r\n```\r\n\r\nYou will need to call `startServer()` to restart the server after modifying these parameters\r\n\r\n### Get list of Fadecandy USB devices attached\r\n\r\n```\r\nHashMap<Integer, UsbItem> usbDevices = mFadecandyClient.getUsbDeviceMap();\r\n```\r\n\r\nThe key is the USB device file descriptor, The value is an `UsbItem` object encapsulating :\r\n\r\n| Class       | description    |\r\n|-------------|----------------|\r\n| `UsbDevice` | features attached USB device     |\r\n| `UsbConnection` | send/receive data from an UBS device |\r\n| `UsbEndpoint` | channel used for sending/receiving data   |\r\n\r\n\r\n### Get Fadecandy server configuration \r\n\r\n```\r\nFadecandyConfig config = mFadecandyClient.getConfig();\r\n```\r\n\r\nFadecandy configuration is composed of the Top level object defined in [Fadecandy Server configuration documentation](https://github.com/scanlime/fadecandy/blob/master/doc/fc_server_config.md#top-level-object)\r\n\r\n### Set Fadecandy service type \r\n\r\n * Set the Fadecandy service as `PERSISTENT` (default value) which means the service will stay in background, a notification will be present in notification view. The user can kill the service by clicking on \"close background service\" on the notification :\r\n\r\n```\r\nmFadecandyClient.setServiceType(ServiceType.PERSISTENT_SERVICE);\r\n```\r\n\r\n![notif](https://github.com/akinaru/fadecandy-android/raw/master/screen/notif.png)\r\n\r\n * Set the Fadencandy service as `NON_PERSISTENT`. The service will be killed as soon as no application is bound to it\r\n\r\n```\r\nmFadecandyClient.setServiceType(ServiceType.NON_PERSISTENT_SERVICE);\r\n```\r\n\r\n### Bind Fadecandy service without starting server\r\n\r\n```\r\nmFadecandyClient.connect();\r\n```\r\n\r\n### Unbind Fadecandy service\r\n\r\n```\r\nmFadecandyClient.disconnect();\r\n```\r\n\r\nAssure you call `disconnect()` to close service & unregister client receiver when you are done with Fadecandy Service (eg exit your application)\r\n\r\n### Proguard\r\n\r\nIf you are using proguard add this to your `proguard-rules.pro` : \r\n\r\n```\r\n-keep class fr.bmartel.android.fadecandy.service.FadecandyService { *; }\r\n\r\n-keepclassmembers,allowobfuscation class fr.bmartel.android.fadecandy.service.FadecandyService.** {\r\n    <methods>;\r\n}\r\n```\r\n\r\nThis will keep methods in `FadecandyService` to preserve calls from native code to this class\r\n\r\n## Build Library\r\n\r\n### Get source code\r\n\r\n```\r\ngit clone git@github.com:akinaru/fadecandy-android.git\r\ncd fadecandy-android\r\ngit submodule update --init --recursive\r\n```\r\n\r\n### Build\r\n\r\n```\r\n./gradlew build\r\n```\r\n\r\n## Open Source components\r\n\r\n### Fadecandy Service\r\n\r\n* Fadecandy : https://github.com/scanlime/fadecandy\r\n* rapidjson : https://github.com/scanlime/rapidjson\r\n* libwebsockets : https://github.com/akinaru/libwebsockets\r\n* Android support-v4\r\n\r\n### Fadecandy Application\r\n\r\n* DiscreteSeekBar : https://github.com/AnderWeb/discreteSeekBar\r\n* Android Holo ColorPicker : https://github.com/LarsWerkman/HoloColorPicker\r\n* Open Pixel Control Library : https://github.com/akinaru/opc-java\r\n* AndroidAsync : https://github.com/koush/AndroidAsync\r\n* Led Icon by Kenneth Appiah, CA (Pulic Domain) : https://thenounproject.com/search/?q=led&i=3156\r\n* appcompat-v7, design & recyclerview-v7\r\n\r\n## License\r\n\r\n```\r\nThe MIT License (MIT) Copyright (c) 2016 Bertrand Martel\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}